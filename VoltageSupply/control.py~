import numpy as np
import argparse
import os, sys, time
from SCPI_socket import *

def parsing():
    parser = argparse.ArgumentParser()
    parser.add_argument('action', type=str, help="Action to be performed")
    args = parser.parse_args()
    return args

dir = os.path.dirname(sys.argv[0]) + '/'
if dir == '/':
    dir = ''

ip = '192.168.133.200'
#ip2 = '192.168.133.201'

def write_number(fname, x):
    f = open(fname, 'w')
    f.write('{}\n'.format(x))
    f.close()

def communicate(cmd):
    s = SCPI_sock_connect(ip)
    r = None
    if '?' == cmd[-1]:
    	r = SCPI_sock_query(s,cmd)
    else:
    	SCPI_sock_send(s, cmd)
    SCPI_sock_close(s)
    return r

if __name__ == '__main__':
    args = parsing()

    if args.action == 'halt':
        communicate('OUTP OFF')
    elif args.action == 'configure':
        communicate('OUTP ON')
    elif args.action == 'update':
        Vset = float(np.loadtxt(dir+'user_set_voltage.txt'))
        Vread = float(communicate('VOLT?'))

        if Vset != Vread:
            communicate('VOLT '+str(Vset))
            time.sleep(0.1)
            Vread = float(communicate('VOLT?'))
            if Vset != Vread:
                f = open(dir+'control.log')
                ln = time.asctime( time.localtime(time.time()) ) + '\n'
                ln += 'Voltage set failed. Vset={} Vread={}\n'.format(Vset, Vread)
                f.write(ln)
                f.close()

        write_number(dir+'read_voltage.txt', Vread)
	write_number(dir+'read_current.txt', float(communicate('CURR?'))
